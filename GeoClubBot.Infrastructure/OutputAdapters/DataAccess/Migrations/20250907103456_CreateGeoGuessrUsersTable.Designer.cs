// <auto-generated />
using System;
using Infrastructure.OutputAdapters.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.OutputAdapters.DataAccess.Migrations
{
    [DbContext(typeof(GeoClubBotDbContext))]
    [Migration("20250907103456_CreateGeoGuessrUsersTable")]
    partial class CreateGeoGuessrUsersTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Entities.Club", b =>
                {
                    b.Property<Guid>("ClubId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("LatestActivityCheckTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("ClubId");

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("Entities.ClubChallengeLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ChallengeId")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RolePriority")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("LatestClubChallengeLinks");
                });

            modelBuilder.Entity("Entities.ClubMember", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)");

                    b.Property<Guid>("ClubId")
                        .HasColumnType("uuid");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("UserId");

                    b.HasIndex("ClubId");

                    b.HasIndex("Nickname");

                    b.ToTable("ClubMembers");
                });

            modelBuilder.Entity("Entities.ClubMemberExcuse", b =>
                {
                    b.Property<Guid>("ExcuseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("From")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("To")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)");

                    b.HasKey("ExcuseId");

                    b.HasIndex("To");

                    b.HasIndex("UserId");

                    b.ToTable("ClubMemberExcuses");
                });

            modelBuilder.Entity("Entities.ClubMemberHistoryEntry", b =>
                {
                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)");

                    b.Property<int>("Xp")
                        .HasColumnType("integer");

                    b.HasKey("Timestamp", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ClubMemberHistoryEntries");
                });

            modelBuilder.Entity("Entities.ClubMemberStrike", b =>
                {
                    b.Property<Guid>("StrikeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Revoked")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)");

                    b.HasKey("StrikeId");

                    b.HasIndex("Timestamp");

                    b.HasIndex("UserId");

                    b.ToTable("ClubMemberStrikes");
                });

            modelBuilder.Entity("Entities.GeoGuessrAccountLinkingRequest", b =>
                {
                    b.Property<decimal>("DiscordUserId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("GeoGuessrUserId")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)");

                    b.HasKey("DiscordUserId", "GeoGuessrUserId");

                    b.ToTable("GeoGuessrAccountLinkingRequests");
                });

            modelBuilder.Entity("Entities.GeoGuessrUser", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)");

                    b.Property<decimal?>("DiscordUserId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("UserId");

                    b.HasIndex("Nickname");

                    b.ToTable("GeoGuessrUsers");
                });

            modelBuilder.Entity("Entities.ClubMember", b =>
                {
                    b.HasOne("Entities.Club", "Club")
                        .WithMany("Members")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");
                });

            modelBuilder.Entity("Entities.ClubMemberExcuse", b =>
                {
                    b.HasOne("Entities.ClubMember", "ClubMember")
                        .WithMany("Excuses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClubMember");
                });

            modelBuilder.Entity("Entities.ClubMemberHistoryEntry", b =>
                {
                    b.HasOne("Entities.ClubMember", "ClubMember")
                        .WithMany("History")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClubMember");
                });

            modelBuilder.Entity("Entities.ClubMemberStrike", b =>
                {
                    b.HasOne("Entities.ClubMember", "ClubMember")
                        .WithMany("Strikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClubMember");
                });

            modelBuilder.Entity("Entities.Club", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("Entities.ClubMember", b =>
                {
                    b.Navigation("Excuses");

                    b.Navigation("History");

                    b.Navigation("Strikes");
                });
#pragma warning restore 612, 618
        }
    }
}
